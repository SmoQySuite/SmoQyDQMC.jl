@doc raw"""
    process_measurements(
        # ARGUMENTS
        comm::MPI.Comm,
        datafolder::String,
        N_bins::Union{Int, Nothing} = nothing,
        pIDs::Vector{Int} = Int[];
        # KEYWORD ARGUMENTS
        # Described in text below...
    )

    process_measurements(
        # ARGUMENTS
        comm::MPI.Comm;
        # KEYWORD ARGUMENTS
        # Described in text below...
    )

    process_measurements(
        # ARGUMENTS
        datafolder::String,
        N_bins::Union{Int, Nothing} = nothing,
        pIDs::Union{Int, Vector{Int}} = Int[];
        # KEYWORD ARGUMENTS
        # Described in text below...
    )

    process_measurements(;
        # KEYWORD ARGUMENTS
        # Described in text below.
    )

Process the HDF5 files containing the binned data generated by a DQMC simulation,
and then write final statistics to a new HDF5 file(s). There is also functionality
available that allows the final stats to then be exported to CSV files as well.

When the first passed arguments is `comm::MPI.Comm`, then the workflow is parallelized using MPI.

In the function signatures above, when `datafolder`, `N_bins` and `pIDs` are not listed as
standard arguments, they are instead included as keyword arguments. The meaning of these
arguments is given below.

# Keyword Arguments
This function has many possible keyword arguments.
Below I group them together into related categories and define their meanings.

## Required Keyword Arguments

- `datafolder::String`: Specify the directory generated by a DQMC simulation into which all the results were written.

## Keyword for Controlling Workflow

- `N_bins::Union{Int, Nothing} = nothing`: Number of bins used to calculate statistics. If `nothing` then set equal to the number of data bins written to file during the simulation. Must be a factor of the number of bins written to file during the DQMC simulation.
- `pIDs::Union{Int,Vector{Int}} = Int[]`: Specifies for which process IDs to calculate average statistics. If `pIDs = Int[]`, the calculate for all process IDs. If `comm::MPI.Comm` is passed as first function argument then `pIDs` must be of type `Vector{Int}` and not `Int`.
- `filename_prefix::String = "stats"`: Start of filename for HDF5 containing final statistics. HDF5 files containing statistcis for a single process ID will end with `pID-$(pID).h5`.
- `rm_binned_data::Bool = false`: Whether to delete the binned data after final statistics are computed.

## Keywords for Exporting Statistics to CSV

- `export_to_csv::Bool = true`: Whether to export the final statistics to CSV file.
- `scientific_notation::Bool = false`: Whether to use scientific notation when exporting statistics to CSV file.
- `decimals::Int = 9`: How many decimal places to include when exporting statistics to CSV files.
- `delimiter::String = " "`: Delimiter used when writing CSV files.

## Keyword Acting as Boolean Flags Indicating Which Statistics to Compute

- `process_global_measurements::Bool = true`: Whether to calculate the statistics for global measurements.
- `process_local_measurements::Bool = true`: Whether to calculate the statistics for local measurements.
- `process_all_equal_time_measurements::Bool = true`: Whether to calculate statistics for all equal-time correlation measurements.
- `process_all_time_displaced_measurements::Bool = true`: Whether to calculate statistics for all time-displaced correlation measurements.
- `process_all_integrated_measurements::Bool = true`: Whether to calculate statistics for all integrated correlation measurements.

## Keyword Specifying Specific Correlation Statistics to Compute

If `process_all_equal_time_measurements = false`, then the keyword arguments below can be used to specify
which specific equal-time correlation measurements to calculate statistics for.

- `standard_equal_time::Vector{String} = String[]`
- `composite_integrated::Vector{String} = String[]`

If `process_all_time_displaced_measurements = false`, then the keyword arguments below can be used to specify
which specific time-displaced correlation measurements to calculate statistics for.

- `standard_time_displaced::Vector{String} = String[]`
- `composite_time_displaced::Vector{String} = String[]`

If `process_all_integrated_measurements = false`, then the keyword arguments below can be used to specify
which specific integrated correlation measurements to calculate statistics for.

- `standard_integrated::Vector{String} = String[]`
- `composite_integrated::Vector{String} = String[]`
"""
function process_measurements(
    # ARGUMENTS
    comm::MPI.Comm,
    datafolder::String,
    N_bins::Union{Int, Nothing} = nothing,
    pIDs::Vector{Int} = Int[];
    # KEYWORD ARGUMENTS
    filename_prefix::String = "stats",
    rm_binned_data::Bool = false,
    export_to_csv::Bool = true,
    scientific_notation::Bool = false,
    decimals::Int = 9,
    delimiter::String = " ",
    process_global_measurements::Bool = true,
    process_local_measurements::Bool = true,
    process_all_equal_time_measurements::Bool = true,
    process_all_time_displaced_measurements::Bool = false,
    process_all_integrated_measurements::Bool = true,
    standard_equal_time::Vector{String} = String[],
    standard_time_displaced::Vector{String} = String[],
    standard_integrated::Vector{String} = String[],
    composite_equal_time::Vector{String} = String[],
    composite_time_displaced::Vector{String} = String[],
    composite_integrated::Vector{String} = String[]
)

    h5filename = process_measurements(
        comm,
        datafolder = datafolder, N_bins = N_bins, pIDs = pIDs,
        filename_prefix = filename_prefix, rm_binned_data = rm_binned_data,
        export_to_csv = export_to_csv, scientific_notation = scientific_notation,
        decimals = decimals, delimiter = delimiter,
        process_global_measurements = process_global_measurements,
        process_local_measurements = process_local_measurements,
        process_all_equal_time_measurements = process_all_equal_time_measurements,
        process_all_time_displaced_measurements = process_all_time_displaced_measurements,
        process_all_integrated_measurements = process_all_integrated_measurements,
        standard_equal_time = standard_equal_time,
        standard_time_displaced = standard_time_displaced,
        standard_integrated = standard_integrated,
        composite_equal_time = composite_equal_time,
        composite_time_displaced = composite_time_displaced,
        composite_integrated = composite_integrated
    )

    return h5filename
end


function process_measurements(
    # ARGUMENTS
    comm::MPI.Comm;
    # KEYWORD ARGUMENTS
    datafolder::String,
    N_bins::Union{Int, Nothing} = nothing,
    pIDs::Vector{Int} = Int[],
    filename_prefix::String = "stats",
    rm_binned_data::Bool = false,
    export_to_csv::Bool = true,
    scientific_notation::Bool = false,
    decimals::Int = 9,
    delimiter::String = " ",
    process_global_measurements::Bool = true,
    process_local_measurements::Bool = true,
    process_all_equal_time_measurements::Bool = true,
    process_all_time_displaced_measurements::Bool = false,
    process_all_integrated_measurements::Bool = true,
    standard_equal_time::Vector{String} = String[],
    standard_time_displaced::Vector{String} = String[],
    standard_integrated::Vector{String} = String[],
    composite_equal_time::Vector{String} = String[],
    composite_time_displaced::Vector{String} = String[],
    composite_integrated::Vector{String} = String[]
)


    # merge binned data
    pIDs = _merge_bins(comm, datafolder, pIDs)

    # construct filename for stats HDF5 file
    if isone(length(pIDs))
        filename = @sprintf "%s_pID-%d.h5" filename_prefix pIDs[MPI.Comm_rank(comm)+1]
    else
        filename = @sprintf "%s.h5" filename_prefix
    end

    # synchronize all processes
    MPI.Barrier(comm)

    # process bins to compute stats
    h5filename = _process_measurements(
        comm,
        datafolder, filename, pIDs, N_bins, rm_binned_data,
        export_to_csv, scientific_notation, decimals, delimiter,
        process_global_measurements, process_local_measurements,
        process_all_equal_time_measurements,
        process_all_time_displaced_measurements,
        process_all_integrated_measurements,
        standard_equal_time, standard_time_displaced, standard_integrated,
        composite_equal_time, composite_time_displaced, composite_integrated
    )

    # if exporting stats to csv file
    if export_to_csv && iszero(MPI.Comm_rank(comm))

        # initialize function to convert floats to strings
        formatter = num_to_string_formatter(decimals, scientific_notation)

        # open HDF5 stats file
        h5open(h5filename, "r") do H5File

            # export global stats to csv file
            _export_global_stats_to_csv(datafolder, "global", H5File, String[], formatter, delimiter)

            # export local stats to csv file
            _export_local_stats_to_csv(datafolder, "local", H5File, String[], formatter, delimiter)

            # iterate over standard equal-time correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["STANDARD"]["EQUAL-TIME"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "equal-time", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "equal-time", "momentum", H5File, delimitter, formatter)
            end

            # iterate over composite equal-time correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["COMPOSITE"]["EQUAL-TIME"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "equal-time", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "equal-time", "momentum", H5File, delimitter, formatter)
            end

            # iterate over standard time-displaced correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["STANDARD"]["TIME-DISPLACED"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "time-displaced", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "time-displaced", "momentum", H5File, delimitter, formatter)
            end

            # iterate over composite time-displaced correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["COMPOSITE"]["TIME-DISPLACED"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "time-displaced", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "time-displaced", "momentum", H5File, delimitter, formatter)
            end

            # iterate over standard integrated correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["STANDARD"]["INTEGRATED"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "integrated", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "integrated", "momentum", H5File, delimitter, formatter)
            end

            # iterate over composite integrated correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["COMPOSITE"]["INTEGRATED"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "integrated", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "integrated", "momentum", H5File, delimitter, formatter)
            end
        end
    end

    MPI.Barrier(comm)

    return h5filename
end


function process_measurements(
    # ARGUMENTS
    datafolder::String,
    N_bins::Union{Int, Nothing} = nothing,
    pIDs::Union{Int, Vector{Int}} = Int[];
    # KEYWORD ARGUMENTS
    filename_prefix::String = "stats",
    rm_binned_data::Bool = false,
    export_to_csv::Bool = true,
    scientific_notation::Bool = false,
    decimals::Int = 9,
    delimiter::String = " ",
    process_global_measurements::Bool = true,
    process_local_measurements::Bool = true,
    process_all_equal_time_measurements::Bool = true,
    process_all_time_displaced_measurements::Bool = false,
    process_all_integrated_measurements::Bool = true,
    standard_equal_time::Vector{String} = String[],
    standard_time_displaced::Vector{String} = String[],
    standard_integrated::Vector{String} = String[],
    composite_equal_time::Vector{String} = String[],
    composite_time_displaced::Vector{String} = String[],
    composite_integrated::Vector{String} = String[]
)

    h5filename = process_measurements(
        datafolder = datafolder, N_bins = N_bins, pIDs = pIDs,
        filename_prefix = filename_prefix, rm_binned_data = rm_binned_data,
        export_to_csv = export_to_csv, scientific_notation = scientific_notation,
        decimals = decimals, delimiter = delimiter,
        process_global_measurements = process_global_measurements,
        process_local_measurements = process_local_measurements,
        process_all_equal_time_measurements = process_all_equal_time_measurements,
        process_all_time_displaced_measurements = process_all_time_displaced_measurements,
        process_all_integrated_measurements = process_all_integrated_measurements,
        standard_equal_time = standard_equal_time,
        standard_time_displaced = standard_time_displaced,
        standard_integrated = standard_integrated,
        composite_equal_time = composite_equal_time,
        composite_time_displaced = composite_time_displaced,
        composite_integrated = composite_integrated
    )

    return h5filename
end


function process_measurements(;
    # KEYWORD ARGUMENTS
    datafolder::String,
    N_bins::Union{Int, Nothing} = nothing,
    pIDs::Union{Int, Vector{Int}} = Int[],
    filename_prefix::String = "stats",
    rm_binned_data::Bool = false,
    export_to_csv::Bool = true,
    scientific_notation::Bool = false,
    decimals::Int = 9,
    delimiter::String = " ",
    process_global_measurements::Bool = true,
    process_local_measurements::Bool = true,
    process_all_equal_time_measurements::Bool = true,
    process_all_time_displaced_measurements::Bool = false,
    process_all_integrated_measurements::Bool = true,
    standard_equal_time::Vector{String} = String[],
    standard_time_displaced::Vector{String} = String[],
    standard_integrated::Vector{String} = String[],
    composite_equal_time::Vector{String} = String[],
    composite_time_displaced::Vector{String} = String[],
    composite_integrated::Vector{String} = String[]
)

    # merge binnded files
    pIDs = _merge_bins(datafolder, pIDs)

    # construct filename for stats HDF5 file
    if isone(length(pIDs))
        filename = @sprintf "%s_pID-%d.h5" filename_prefix pIDs[1]
    else
        filename = @sprintf "%s.h5" filename_prefix
    end

    # process bins to compute stats
    h5filename = _process_measurements(
        datafolder, filename, pIDs, N_bins, rm_binned_data,
        export_to_csv, scientific_notation, decimals, delimiter,
        process_global_measurements, process_local_measurements,
        process_all_equal_time_measurements,
        process_all_time_displaced_measurements,
        process_all_integrated_measurements,
        standard_equal_time, standard_time_displaced, standard_integrated,
        composite_equal_time, composite_time_displaced, composite_integrated
    )

    # if exporting stats to csv file
    if export_to_csv

        # initialize function to convert floats to strings
        formatter = num_to_string_formatter(decimals, scientific_notation)

        # open HDF5 stats file
        h5open(h5filename, "r") do H5File

            # export global stats to csv file
            _export_global_stats_to_csv(datafolder, "global", H5File, String[], formatter, delimiter)

            # export local stats to csv file
            _export_local_stats_to_csv(datafolder, "local", H5File, String[], formatter, delimiter)

            # iterate over standard equal-time correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["STANDARD"]["EQUAL-TIME"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "equal-time", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "equal-time", "momentum", H5File, delimitter, formatter)
            end

            # iterate over composite equal-time correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["COMPOSITE"]["EQUAL-TIME"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "equal-time", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "equal-time", "momentum", H5File, delimitter, formatter)
            end

            # iterate over standard time-displaced correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["STANDARD"]["TIME-DISPLACED"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "time-displaced", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "time-displaced", "momentum", H5File, delimitter, formatter)
            end

            # iterate over composite time-displaced correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["COMPOSITE"]["TIME-DISPLACED"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "time-displaced", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "time-displaced", "momentum", H5File, delimitter, formatter)
            end

            # iterate over standard integrated correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["STANDARD"]["INTEGRATED"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "integrated", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "integrated", "momentum", H5File, delimitter, formatter)
            end

            # iterate over composite integrated correlation measurements
            for correlation in keys(H5File["CORRELATIONS"]["COMPOSITE"]["INTEGRATED"])

                # export position-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "integrated", "position", H5File, delimitter, formatter)

                # export momentum-space correlation to csv file
                _export_correlation_stats_to_csv(datafolder, correlation, "integrated", "momentum", H5File, delimitter, formatter)
            end
        end
    end

    return h5filename
end